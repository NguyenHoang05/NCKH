console.log("‚úÖ borrow.js loaded");

import { db, rtdb } from './firebase.js';
import { doc, setDoc, updateDoc } from "https://www.gstatic.com/firebasejs/11.10.0/firebase-firestore.js";
import { ref, set, update, onValue, remove } from "https://www.gstatic.com/firebasejs/11.10.0/firebase-database.js";

// H√†m ƒë√≥ng modal
window.closeBorrowForm = function () {
  document.getElementById("borrowModal").style.display = "none";
}

// H√†m m·ªü modal
window.openBorrowForm = function () {
  document.getElementById("borrowModal").style.display = "flex";

  // üî• Theo d√µi realtime temp ‚Üí t·ª± ƒëi·ªÅn form khi c√≥ thay ƒë·ªïi
  const tempRef = ref(rtdb, "temp");
  onValue(tempRef, (snapshot) => {
    if (snapshot.exists()) {
      const temp = snapshot.val();

      // L·∫•y d·ªØ li·ªáu student
      if (temp.student) {
        document.getElementById("studentName").value = temp.student.username || "";
        document.getElementById("studentId").value = temp.student.iduser || "";
      }

      // L·∫•y d·ªØ li·ªáu book
      if (temp.book) {
        document.getElementById("bookId").value = temp.book.id || "";
        document.getElementById("bookNameBorrow").value = temp.book.title || "";
      }
    }
  });
}

// H√†m submit form m∆∞·ª£n s√°ch
window.submitBorrowForm = async function (event) {
  event.preventDefault();

  const studentName = document.getElementById("studentName").value.trim();
  const studentId = document.getElementById("studentId").value.trim();
  const bookId = document.getElementById("bookId").value.trim();
  const bookName = document.getElementById("bookNameBorrow").value.trim();
  const borrowDate = document.getElementById("borrowDate").value;
  const returnDate = document.getElementById("returnDate").value;

  if (!studentName || !studentId || !bookId || !bookName || !borrowDate || !returnDate) {
    alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
    return;
  }

  try {
    const historyId = `${studentId}_${bookId}_${borrowDate}`;

    // 1Ô∏è‚É£ L∆∞u v√†o Firestore
    await setDoc(doc(db, "history", historyId), {
      studentName,
      studentId,
      bookId,
      bookName,
      borrowDate,
      returnDate,
      status: "ƒêang m∆∞·ª£n",
      createdAt: new Date()
    });
    console.log("‚úÖ Firestore ghi th√†nh c√¥ng!");

    // 2Ô∏è‚É£ L∆∞u v√†o Realtime Database
    await set(ref(rtdb, "history/" + historyId), {
      studentName,
      studentId,
      bookId,
      bookName,
      borrowDate,
      returnDate,
      status: "ƒêang m∆∞·ª£n",
      createdAt: new Date().toISOString()
    });
    console.log("‚úÖ Realtime DB ghi th√†nh c√¥ng!");

    // 3Ô∏è‚É£ Update tr·∫°ng th√°i s√°ch (books)
    try {
      await updateDoc(doc(db, "books", bookId), { status: "ƒê√£ m∆∞·ª£n" });
      await update(ref(rtdb, "books/" + bookId), { status: "ƒê√£ m∆∞·ª£n" });
      console.log("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i s√°ch th√†nh c√¥ng!");
    } catch (err) {
      console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s√°ch trong books ƒë·ªÉ update!", err);
    }

    // 4Ô∏è‚É£ X√≥a temp ƒë·ªÉ chu·∫©n b·ªã cho l·∫ßn qu√©t m·ªõi
    await remove(ref(rtdb, "temp"));
    console.log("üóëÔ∏è ƒê√£ x√≥a temp sau khi m∆∞·ª£n!");

    alert("üìö M∆∞·ª£n s√°ch th√†nh c√¥ng!");
    document.getElementById("borrowForm").reset();
    closeBorrowForm();

  } catch (error) {
    console.error("‚ùå L·ªói khi m∆∞·ª£n s√°ch:", error);
    alert("Kh√¥ng th·ªÉ m∆∞·ª£n s√°ch: " + error.message);
  }
};
